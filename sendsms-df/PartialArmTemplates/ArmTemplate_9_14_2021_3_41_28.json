{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "sendsms-df"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CopyFiles_Message_ServiceBus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "List of files",
						"description": "Scan the file path on your source storage store and get the container list.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {
									"SourceFilePath": "file",
									"DestinationFilePath": "file"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachContainer",
						"description": "Get the container list from Metadata activity and then iterates each of them to Copy activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List of files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List of files').output.childItems",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "CopyOneContainer",
									"description": "Copy each container from source storage store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@concat(pipeline().parameters.SourceFilePath,'/',item().name)"
										},
										{
											"name": "Destination",
											"value": "@concat(pipeline().parameters.DestinationFilePath,'/',item().name)"
										}
									],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": "hello-*.csv",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "DelimitedText2",
											"type": "DatasetReference",
											"parameters": {
												"SourceFilePath": "file",
												"DestinationFilePath": "file"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText2",
											"type": "DatasetReference",
											"parameters": {
												"SourceFilePath": "file",
												"DestinationFilePath": "file"
											}
										}
									]
								},
								{
									"name": "Message ID",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "CopyOneContainer",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MessageID",
										"value": {
											"value": "@concat(utcnow(),'_',pipeline().RunId)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Queue Message",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Message ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Message",
										"value": {
											"value": "@concat('{\"MessageID\":\"', variables('MessageID'), '\",\"FileName\":\"', item().name, '\",\"FileSize\":\"', activity('CopyOneContainer').output.dataWritten,'\"}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Send Queue Message",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Queue Message",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://sendsms-logicapp.azurewebsites.net:443/api/sendsms/triggers/manual/invoke?api-version=2020-05-01-preview&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=K8stpK218rqR61eGvtjHQ_gklHCpZd0WVPDMFcG8SE8",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"Message": "@variables('Message')",
											"SessionID": "@pipeline().RunId"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceFilePath": {
						"type": "String",
						"defaultValue": "/storesalesfiles"
					},
					"DestinationFilePath": {
						"type": "String",
						"defaultValue": "/storesalesfiles-staging"
					}
				},
				"variables": {
					"MessageID": {
						"type": "String"
					},
					"Message": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Copy Activity"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "first.csv",
						"container": "file"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceFilePath": {
						"type": "string",
						"defaultValue": "file"
					},
					"DestinationFilePath": {
						"type": "string",
						"defaultValue": "file"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "file"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		}
	]
}